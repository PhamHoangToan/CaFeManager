"use client";
import { useEffect, useState } from "react";
import axios from "axios";
import { Province, fetchAllProvinces } from "@/lib/locationService";

const API_URL = process.env.NEXT_PUBLIC_API_URL;

interface Props {
  onProvinceChange?: (province: string) => void;
}

interface Address {
  id?: number;
  fullName: string;
  phone: string;
  addressLine: string;
  province: string;
  district: string;
  ward: string;
  note?: string;
  isDefault?: boolean;
}

export default function CheckoutInfo({ onProvinceChange }: Props) {
  const [provinces, setProvinces] = useState<Province[]>([]);
  const [districts, setDistricts] = useState<string[]>([]);
  const [wards, setWards] = useState<string[]>([]);
  const [errors, setErrors] = useState<{ [key: string]: string }>({});

  const [form, setForm] = useState<Address>({
    fullName: "",
    phone: "",
    addressLine: "",
    province: "",
    district: "",
    ward: "",
    note: "",
  });

  // üü¢ L·∫•y danh s√°ch t·ªânh
  useEffect(() => {
    console.log("üåè [CheckoutInfo] B·∫Øt ƒë·∫ßu t·∫£i danh s√°ch t·ªânh...");
    fetchAllProvinces()
      .then((data) => {
        console.log("‚úÖ [CheckoutInfo] T·∫£i t·ªânh th√†nh th√†nh c√¥ng:", data.length, "t·ªânh");
        setProvinces(data);
      })
      .catch((err) => console.error("‚ùå [CheckoutInfo] L·ªói t·∫£i danh s√°ch t·ªânh:", err));
  }, []);

  // üü¢ N·∫øu user ƒë√£ ƒëƒÉng nh·∫≠p ‚Üí t·ª± ƒë·ªông load ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh
  useEffect(() => {
    const user = JSON.parse(localStorage.getItem("user") || "{}");
    console.log("üë§ [CheckoutInfo] User localStorage:", user);

    if (!user?.id) {
      console.warn("‚ö†Ô∏è [CheckoutInfo] Kh√¥ng t√¨m th·∫•y user.id trong localStorage");
      return;
    }

    const loadDefaultAddress = async () => {
      try {
        console.log("üöÄ [CheckoutInfo] G·ªçi API l·∫•y ƒë·ªãa ch·ªâ:", `${API_URL}/addresses/customer/${user.id}`);
        const res = await axios.get(`${API_URL}/addresses/customer/${user.id}`);
        console.log("üì¶ [CheckoutInfo] API Response:", res.data);

        // Ki·ªÉm tra xem API tr·∫£ v·ªÅ data ƒë√∫ng d·∫°ng hay kh√¥ng
        if (!res.data) {
          console.warn("‚ö†Ô∏è [CheckoutInfo] API kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu");
          return;
        }

        const addresses: Address[] = Array.isArray(res.data) ? res.data : res.data?.data || [];

        console.log("üì¨ [CheckoutInfo] T·ªïng ƒë·ªãa ch·ªâ t√¨m th·∫•y:", addresses.length);

        if (addresses.length === 0) {
          console.warn("‚ö†Ô∏è [CheckoutInfo] Ng∆∞·ªùi d√πng ch∆∞a c√≥ ƒë·ªãa ch·ªâ n√†o trong DB");
          return;
        }

        // ∆Øu ti√™n ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh
        const defaultAddr = addresses.find((a) => a.isDefault) || addresses[0];
        console.log("üè† [CheckoutInfo] Default address:", defaultAddr);

        // C·∫≠p nh·∫≠t form
        setForm({
          fullName: defaultAddr.fullName || "",
          phone: defaultAddr.phone || "",
          addressLine: defaultAddr.addressLine || "",
          province: defaultAddr.province || "",
          district: defaultAddr.district || "",
          ward: defaultAddr.ward || "",
          note: defaultAddr.note || "",
        });

        // üîç T·ª± ƒë·ªông load danh s√°ch qu·∫≠n/huy·ªán v√† ph∆∞·ªùng/x√£
        const selectedProvince = provinces.find(
          (p) => p.province === defaultAddr.province
        );
        if (!selectedProvince) {
          console.warn("‚ö†Ô∏è [CheckoutInfo] Kh√¥ng t√¨m th·∫•y t·ªânh trong danh s√°ch:", defaultAddr.province);
          return;
        }

        const dists = [
          ...new Set(selectedProvince.wards.map((w) => w.name.split(",")[0])),
        ];
        setDistricts(dists);

        const wardList = selectedProvince.wards
          .filter((w) => w.name.includes(defaultAddr.district))
          .map((w) => w.name);
        setWards(wardList);

        console.log("‚úÖ [CheckoutInfo] Load ƒë·ªãa ch·ªâ th√†nh c√¥ng, form ƒë√£ ƒë∆∞·ª£c ƒëi·ªÅn");
      } catch (err: any) {
        console.error("‚ùå [CheckoutInfo] L·ªói khi load ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh:", err.message || err);
      }
    };

    if (provinces.length > 0) {
      console.log("üåê [CheckoutInfo] Provinces ƒë√£ s·∫µn s√†ng, ti·∫øn h√†nh load ƒë·ªãa ch·ªâ...");
      loadDefaultAddress();
    } else {
      console.log("‚è≥ [CheckoutInfo] Ch∆∞a c√≥ provinces, ch·ªù useEffect k·∫ø ti·∫øp...");
    }
  }, [provinces]); // Ch·ªù danh s√°ch t·ªânh load xong tr∆∞·ªõc khi fill

  const handleProvince = (provinceName: string) => {
    console.log("üìç [CheckoutInfo] Ch·ªçn t·ªânh:", provinceName);
    setForm({ ...form, province: provinceName, district: "", ward: "" });
    onProvinceChange?.(provinceName);

    const selected = provinces.find((p) => p.province === provinceName);
    if (selected) {
      const dists = selected.wards.map((w) => w.name.split(",")[0]);
      setDistricts([...new Set(dists)]);
      setWards([]);
      console.log("üèôÔ∏è [CheckoutInfo] C·∫≠p nh·∫≠t danh s√°ch qu·∫≠n/huy·ªán:", dists.length);
    }
  };

  const handleDistrict = (districtName: string) => {
    console.log("üèòÔ∏è [CheckoutInfo] Ch·ªçn qu·∫≠n:", districtName);
    setForm({ ...form, district: districtName, ward: "" });

    const selectedProvince = provinces.find(
      (p) => p.province === form.province
    );
    if (selectedProvince) {
      const wardList = selectedProvince.wards
        .filter((w) => w.name.includes(districtName))
        .map((w) => w.name);
      setWards(wardList);
      console.log("üè° [CheckoutInfo] C·∫≠p nh·∫≠t danh s√°ch ph∆∞·ªùng/x√£:", wardList.length);
    }
  };

  // üßæ Validation
  const validateForm = () => {
    const newErrors: { [key: string]: string } = {};
    if (!form.fullName.trim()) newErrors.fullName = "Vui l√≤ng nh·∫≠p h·ªç v√† t√™n";
    if (!form.phone.trim()) newErrors.phone = "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i";
    if (!form.addressLine.trim())
      newErrors.addressLine = "Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ c·ª• th·ªÉ";
    if (!form.province) newErrors.province = "Vui l√≤ng ch·ªçn t·ªânh/th√†nh";
    if (!form.district) newErrors.district = "Vui l√≤ng ch·ªçn qu·∫≠n/huy·ªán";
    if (!form.ward) newErrors.ward = "Vui l√≤ng ch·ªçn ph∆∞·ªùng/x√£";
    setErrors(newErrors);
    console.log("üß© [CheckoutInfo] K·∫øt qu·∫£ validate:", newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleBlur = () => validateForm();

  // üñ•Ô∏è Render UI
  return (
    <div className="space-y-3">
      <h2 className="text-lg font-semibold text-[#5C2C1C]">
        Th√¥ng tin nh·∫≠n h√†ng
      </h2>

      {/* H·ªç v√† t√™n */}
      <div>
        <input
          type="text"
          placeholder="H·ªç v√† t√™n"
          value={form.fullName}
          onChange={(e) => setForm({ ...form, fullName: e.target.value })}
          onBlur={handleBlur}
          className={`w-full border rounded-md p-2 ${
            errors.fullName ? "border-red-500" : "border-gray-300"
          }`}
          required
        />
        {errors.fullName && (
          <p className="text-red-500 text-xs mt-1">{errors.fullName}</p>
        )}
      </div>

      {/* S·ªë ƒëi·ªán tho·∫°i */}
      <div>
        <input
          type="tel"
          placeholder="S·ªë ƒëi·ªán tho·∫°i"
          value={form.phone}
          onChange={(e) => setForm({ ...form, phone: e.target.value })}
          onBlur={handleBlur}
          className={`w-full border rounded-md p-2 ${
            errors.phone ? "border-red-500" : "border-gray-300"
          }`}
          required
        />
        {errors.phone && (
          <p className="text-red-500 text-xs mt-1">{errors.phone}</p>
        )}
      </div>

      {/* ƒê·ªãa ch·ªâ c·ª• th·ªÉ */}
      <div>
        <input
          type="text"
          placeholder="ƒê·ªãa ch·ªâ c·ª• th·ªÉ"
          value={form.addressLine}
          onChange={(e) => setForm({ ...form, addressLine: e.target.value })}
          onBlur={handleBlur}
          className={`w-full border rounded-md p-2 ${
            errors.addressLine ? "border-red-500" : "border-gray-300"
          }`}
          required
        />
        {errors.addressLine && (
          <p className="text-red-500 text-xs mt-1">{errors.addressLine}</p>
        )}
      </div>

      {/* T·ªânh/Th√†nh */}
      <div>
        <select
          className={`w-full border rounded-md p-2 ${
            errors.province ? "border-red-500" : "border-gray-300"
          }`}
          value={form.province}
          onChange={(e) => handleProvince(e.target.value)}
          onBlur={handleBlur}
          required
        >
          <option value="">T·ªânh th√†nh</option>
          {provinces.map((prov) => (
            <option key={prov.id} value={prov.province}>
              {prov.province}
            </option>
          ))}
        </select>
        {errors.province && (
          <p className="text-red-500 text-xs mt-1">{errors.province}</p>
        )}
      </div>

      {/* Qu·∫≠n/Huy·ªán */}
      <div>
        <select
          className={`w-full border rounded-md p-2 ${
            errors.district ? "border-red-500" : "border-gray-300"
          }`}
          value={form.district}
          onChange={(e) => handleDistrict(e.target.value)}
          onBlur={handleBlur}
          required
        >
          <option value="">Qu·∫≠n/Huy·ªán</option>
          {districts.map((d) => (
            <option key={d}>{d}</option>
          ))}
        </select>
        {errors.district && (
          <p className="text-red-500 text-xs mt-1">{errors.district}</p>
        )}
      </div>

      {/* Ghi ch√∫ */}
      <textarea
        placeholder="Ghi ch√∫ (t√πy ch·ªçn)"
        rows={3}
        value={form.note}
        onChange={(e) => setForm({ ...form, note: e.target.value })}
        className="w-full border rounded-md p-2 resize-none border-gray-300"
      />
    </div>
  );
}
