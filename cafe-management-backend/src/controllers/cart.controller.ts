import { FastifyRequest, FastifyReply } from "fastify";
import { cartService } from "../services/cart.service";
import { Prisma } from "@prisma/client";
type CartWithItems = Prisma.OrderGetPayload<{
  include: { items: { include: { product: true } } };
}>;
export const cartController = {
  // üßæ L·∫•y gi·ªè h√†ng
  async getCart(req: FastifyRequest, reply: FastifyReply) {
    try {
      const { cartId, customerId } = req.query as {
        cartId?: string;
        customerId?: string;
      };

      console.log("üü¢ [getCart] Nh·∫≠n request:", req.query);

      if (!cartId && !customerId) {
        console.warn("‚ö†Ô∏è [getCart] Thi·∫øu cartId ho·∫∑c customerId");
        return reply.code(400).send({ message: "Thi·∫øu cartId ho·∫∑c customerId" });
      }

      let cart: CartWithItems | null = null;

      if (customerId) {
        console.log("üë§ [getCart] D√πng customerId:", customerId);
        cart = await cartService.getCartByCustomer(Number(customerId));
      } else {
        console.log("üõçÔ∏è [getCart] D√πng cartId:", cartId);
        cart = await cartService.getCartById(cartId!);
      }

      if (!cart) {
        console.warn("‚ö†Ô∏è [getCart] Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng!");
      } else {
        console.log("‚úÖ [getCart] Gi·ªè h√†ng c√≥:", cart.items?.length || 0, "s·∫£n ph·∫©m");
      }

      reply.send(cart);
    } catch (err) {
      console.error("‚ùå [getCart] L·ªói:", err);
      reply.code(500).send({ message: "L·ªói server khi l·∫•y gi·ªè h√†ng" });
    }
  },

  // ‚ûï Th√™m s·∫£n ph·∫©m
 async addItem(req: FastifyRequest, reply: FastifyReply) {
  try {
    console.log("üì• [addItem] Body:", req.body);
    const { cartId, customerId, productId, quantity, price } = req.body as any;

    console.log(
      "üë§ [addItem] Ng∆∞·ªùi th√™m:",
      customerId
        ? `Kh√°ch ƒëƒÉng nh·∫≠p (customerId=${customerId})`
        : `Kh√°ch v√£ng lai (cartId=${cartId})`
    );

    if (!productId || !price)
      return reply.code(400).send({ message: "Thi·∫øu d·ªØ li·ªáu s·∫£n ph·∫©m" });

    const cart = customerId
      ? await cartService.addItemByCustomer(
          Number(customerId),
          Number(productId),
          Number(quantity || 1),
          Number(price)
        )
      : await cartService.addItemByCartId(
          cartId,
          Number(productId),
          Number(quantity || 1),
          Number(price)
        );

    console.log("‚úÖ [addItem] Gi·ªè h√†ng sau khi th√™m:", cart);
    reply.send(cart);
  } catch (err) {
    console.error("‚ùå [addItem] L·ªói:", err);
    reply.code(500).send({ message: "L·ªói server khi th√™m s·∫£n ph·∫©m v√†o gi·ªè" });
  }
},


  // üîÑ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
  async updateQty(req: FastifyRequest, reply: FastifyReply) {
    try {
      const { itemId, quantity } = req.body as any;
      if (!itemId || quantity == null)
        return reply.code(400).send({ message: "Thi·∫øu itemId ho·∫∑c quantity" });

      const updated = await cartService.updateQuantity(Number(itemId), Number(quantity));
      reply.send(updated);
    } catch (err) {
      console.error("‚ùå [updateQty] L·ªói:", err);
      reply.code(500).send({ message: "L·ªói server khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng" });
    }
  },

  // ‚ùå X√≥a s·∫£n ph·∫©m
  async remove(req: FastifyRequest, reply: FastifyReply) {
    try {
      const { itemId } = req.params as { itemId: string };
      if (!itemId) return reply.code(400).send({ message: "Thi·∫øu itemId" });

      const item = await cartService.removeItem(Number(itemId));
      reply.send({ message: "ƒê√£ x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng", item });
    } catch (err) {
      console.error("‚ùå [remove] L·ªói:", err);
      reply.code(500).send({ message: "L·ªói server khi x√≥a s·∫£n ph·∫©m" });
    }
  },
};
